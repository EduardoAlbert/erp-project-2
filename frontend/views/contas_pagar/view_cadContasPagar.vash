@html.extend('layout', function(model){ @html.block('content', function(model){

<main>
  <div class="container-fluid px-4">
    <h1 class="mt-2">@model.title</h1>
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active">@model.title</li>
    </ol>
    <div class="row">
      <div class="col-xl-12">
        <div class="card-header"></div>

        <div class="card-body">
          <div class="col-sm-6 col-xxl-12">

            <form id="form">

              <div class="mb-1" style="display: none">
                <input type="number" name="id" class="form-control" id="id" />
              </div>

              <div class="mb-1 row ">
                <label for="due_date" class="col-sm-3 col-xxl-1 col-form-label required">Data:</label>
                <div class="col-sm-5 col-xxl-3">
                  <input type="date" name="due_date" class="form-control-plaintext" id="due_date" required readonly />
                </div>
              </div>

              <div class="mb-1 row ">
                <label for="amount" class="col-sm-3 col-xxl-1 col-form-label required">Valor:</label>
                <div class="col-sm-5 col-xxl-3">
                  <input type="text" name="amount" class="form-control-plaintext" id="amount" required readonly />
                </div>
              </div>

               <div class="mb-1 row ">
                <label for="description" class="col-sm-3 col-xxl-1 col-form-label required">Descrição:</label>
                <div class="col-sm-5 col-xxl-3">
                  <input type="text" name="description" class="form-control-plaintext" id="description" required readonly />
                </div>
              </div>
              
            </form>

          </div>
          <div class="">
            <button type="button" class="btn btn-success me-2" onclick="btnSalvar()" id="btnSalvar" hidden>
              Salvar
            </button>

            <button type="button" class="btn btn-warning me-2" onclick="btnAlterar()" id="btnAlterar" hidden>
              Alterar
            </button>

            <button type="button" class="btn btn-warning me-2" onclick="btnSalvarAlteracao()" id="btnSalvarAlteracao" hidden>
              Salvar Alteração
            </button>

            <button type="button" class="btn btn-info me-2" onclick="btnCancelarAlteracao()" id="btnCancelarAlteracao" hidden>
              Cancelar Alteração
            </button>

            <button type="" class="btn btn-danger" onclick="btnRemover()" id="btnRemover" hidden>
              Remover
            </button>

            <button type="button" class="btn btn-primary" onclick="window.location.href = '/contas-pagar'" id="btnFechar">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

}) })

<script>
  const form = document.getElementById("form");
  var oper = "@model.oper";

  window.onload = limpaForm();

  //@ Limpa o conteúdo dos campos do formulário
  async function limpaForm() {

    $("#form").each(function() {
      this.reset();
    });

    // Mostra os botões de acordo com o tipo da operação
    if (oper == "c") {
      $("#btnSalvar").prop("hidden", false);
      habilitaForm();
    }

    if (oper == "u") {
      $("#btnAlterar").prop("hidden", false);
    }

    //Necessário para buscar dados de acordo com o ID para serem alterados
    if (oper == "u") {
      idBusca = "@model.idBusca";
      await getDados(idBusca);
    }

    //Coloca o cursor no primeiro campo do formulário
    $("#due_date").focus();
  }

  //@ Busca os dados de acordo com o ID para serem alterados
  async function getDados(idBuscaPar) {
    console.log("[getDados] idBusca", idBuscaPar);

    try {
      const resp = await axios.post(
        "/contas-pagar/getDados", {
          idBusca: idBuscaPar
        }, {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      if (resp.data.status == "ok") {

        function formatDate(date = new Date()) {
            const year = date.toLocaleString('default', {year: 'numeric'});
            const month = date.toLocaleString('default', {
                month: '2-digit',
            });
            const day = date.toLocaleString('default', {day: '2-digit'});

            return [year, month, day].join('-');
        }

        let due_date = new Date(resp.data.record.due_date);
        due_date = formatDate(due_date);

        $("#id").val(resp.data.record.id);
        $("#due_date").val(due_date);
        $("#amount").val(resp.data.record.amount);
        $("#description").val(resp.data.record.description);

      } else {
        alert("Houve erro ao buscar os dados dos alunos!");
      }
    } catch (error) {
      alert("[view_ContasPagar|getDados]Ocorreu um erro inesperado!" + error);
    }
  }

  //@ Valida o formulário antes de salvá-lo
  function validaForm(formDataPar) {
    var validado = true;
    $("#form input, #form select").each(function(index) {
      var input = $(this);
      if (
        input.attr("type") == "text" &&
        input.prop("required") &&
        String(input.val()).length == 0
      ) {
        alert("Campo obrigatório");
        $(input).focus();
        validado = false;
        return false;
      }
    });

    return validado;
  }

  //@ Salva os dados
  async function btnSalvar() {
    const formData = new FormData(form);

    const validado = validaForm(formData);
    if (!validado) {
      return;
    }

    try {
      resp = await axios.post("/contas-pagar/inserir", formData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        limpaForm();
      } else {
        alert("Houve um erro: " + resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadContasPagar|btnSalvar]Ocorreu um erro inesperado!" + error);
    }
  }

  //@ Habilita form para alteração
  function habilitaForm() {
    $("#due_date").prop("class", "form-control");
    $("#due_date").prop("readonly", false);

    $("#amount").prop("class", "form-control");
    $("#amount").prop("readonly", false);

    $("#description").prop("class", "form-control");
    $("#description").prop("readonly", false);

  }

  //@ Habilita a alteração
  async function btnAlterar() {
    $("#btnSalvarAlteracao").prop("hidden", false);
    $("#btnCancelarAlteracao").prop("hidden", false);
    $("#btnRemover").prop("hidden", false);
    $("#btnAlterar").prop("hidden", true);

    habilitaForm();
  }

  async function btnSalvarAlteracao() {
    const formData = new FormData(form);
    const validado = validaForm(formData);
    if (!validado) {
      return;
    }

    try {
      resp = await axios.post("/contas-pagar/atualizar", formData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        window.open("/contas-pagar/atualizar/" + String($("#id").val()), "_self");
      } else {
        alert("Houve um erro: " + resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadContasPagar|btnSalvarAlteracao]Ocorreu um erro inesperado!" + error);
    }


  }

  //@ Cancela a alteração
  async function btnCancelarAlteracao() {
    window.open("/contas-pagar/atualizar/" + String($("#id").val()), "_self");
  }

  //@ Remove conta a pagar
  async function btnRemover() { 

    var confirma = confirm("Deseja realmente remover o registro?");
    if (!confirma) {
      return; //@ Se o usuário selecionar Cancela, o registro não é removido.
    }
    const formData = new FormData(form);

    try {
      resp = await axios.post("/contas-pagar/deletar", {
        id: formData.get("id")
      }, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        window.open("/contas-pagar", "_self");
      } else {
        alert("Houve um erro: " + resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadContasPagar|btnRemover]Ocorreu um erro inesperado!" + error);
    }
  }

  $(function() {
    $("#amount").maskMoney();
  });

</script>

<style>
  .required:after {
    content: " *";
    color: red;
  }
</style>